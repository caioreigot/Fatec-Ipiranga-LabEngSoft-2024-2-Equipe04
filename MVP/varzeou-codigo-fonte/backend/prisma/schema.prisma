// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  String        @id @default(uuid())
  profile_picture_url String?
  first_name          String
  last_name           String
  email               String        @unique
  password_hash       String
  soccer_role         String?
  posts               Post[]
  PostLikes           PostLikes[]
  followers           Follows[]     @relation(name: "followers")
  following           Follows[]     @relation(name: "following")
  sender              Message[]     @relation(name: "sender")
  receiver            Message[]     @relation(name: "receiver")
  PostComment         PostComment[]
}

model UserToConfirm {
  id            String @id @default(uuid())
  roomId        String @default(uuid())
  first_name    String
  last_name     String
  email         String @unique
  password_hash String
}

model Post {
  id                   String        @id @default(uuid())
  attachment_image_url String?
  userId               String
  text                 String
  createdAt            DateTime      @default(now())
  author               User          @relation(fields: [userId], references: [id])
  PostLikes            PostLikes[]
  PostComment          PostComment[]
}

model PostLikes {
  id       Int    @id @default(autoincrement())
  userId   String
  postId   String
  reaction String
  post     Post   @relation(fields: [postId], references: [id])
  user     User   @relation(fields: [userId], references: [id])
}

model Follows {
  id          Int    @id @default(autoincrement())
  followerId  String
  followingId String
  follower    User   @relation(fields: [followerId], references: [id], name: "followers")
  following   User   @relation(fields: [followingId], references: [id], name: "following")
}

model Message {
  id                   Int      @id @default(autoincrement())
  createdAt            DateTime @default(now())
  senderId             String
  receiverId           String
  senderProfilePicture String?
  text                 String
  sender               User     @relation(fields: [senderId], references: [id], name: "sender")
  receiver             User     @relation(fields: [receiverId], references: [id], name: "receiver")
}

model PostComment {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  postId             String
  userId             String
  userFullname       String
  userProfilePicture String?
  text               String
  user               User     @relation(fields: [userId], references: [id])
  post               Post     @relation(fields: [postId], references: [id])
}
